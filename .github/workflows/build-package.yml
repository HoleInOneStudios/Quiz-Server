name: Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

env:
  NODE_VERSION: "20"
  TEMP_RELEASE_DIR: temp_release
  WIN_ARTIFACT: quiz-app-win.zip
  LINUX_ARTIFACT: quiz-app-linux.zip
  MACOS_ARTIFACT: quiz-app-macos.zip

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: |
          npm run build:scripts
          mkdir -p ${{ env.TEMP_RELEASE_DIR }}/release
          cp src/data/data.xlsx ${{ env.TEMP_RELEASE_DIR }}/data.xlsx
          cp -r src/img ${{ env.TEMP_RELEASE_DIR }}/img
          cp .env ${{ env.TEMP_RELEASE_DIR }}/.env
          sed -i '/^NODE_ENV=/d' ${{ env.TEMP_RELEASE_DIR }}/.env
          sed -i 's/^FILE_PATH=.*$/FILE_PATH="data.xlsx"/' ${{ env.TEMP_RELEASE_DIR }}/.env

      - name: Verify Windows build
        run: |
          if [ ! -f dist/quiz-app-win.exe ]; then
            echo "Windows build not found!"
            exit 1
          fi

      - name: Verify Linux build
        run: |
          if [ ! -f dist/quiz-app-linux ]; then
            echo "Linux build not found!"
            exit 1
          fi

      - name: Verify macOS build
        run: |
          if [ ! -f dist/quiz-app-macos ]; then
            echo "macOS build not found!"
            exit 1
          fi

      - name: Package Windows artifact
        run: |
          cp dist/quiz-app-win.exe ${{ env.TEMP_RELEASE_DIR }}/quiz-app.exe
          zip -j ${{ env.TEMP_RELEASE_DIR }}/release/${{ env.WIN_ARTIFACT }} ${{ env.TEMP_RELEASE_DIR }}/quiz-app.exe ${{ env.TEMP_RELEASE_DIR }}/data.xlsx ${{ env.TEMP_RELEASE_DIR }}/.env ${{ env.TEMP_RELEASE_DIR }}/img/*
          rm ${{ env.TEMP_RELEASE_DIR }}/quiz-app.exe

      - name: Package Linux artifact
        run: |
          cp dist/quiz-app-linux ${{ env.TEMP_RELEASE_DIR }}/quiz-app
          zip -j ${{ env.TEMP_RELEASE_DIR }}/release/${{ env.LINUX_ARTIFACT }} ${{ env.TEMP_RELEASE_DIR }}/quiz-app ${{ env.TEMP_RELEASE_DIR }}/data.xlsx ${{ env.TEMP_RELEASE_DIR }}/.env ${{ env.TEMP_RELEASE_DIR }}/img/*
          rm ${{ env.TEMP_RELEASE_DIR }}/quiz-app

      - name: Package macOS artifact
        run: |
          cp dist/quiz-app-macos ${{ env.TEMP_RELEASE_DIR }}/quiz-app
          zip -j ${{ env.TEMP_RELEASE_DIR }}/release/${{ env.MACOS_ARTIFACT }} ${{ env.TEMP_RELEASE_DIR }}/quiz-app ${{ env.TEMP_RELEASE_DIR }}/data.xlsx ${{ env.TEMP_RELEASE_DIR }}/.env ${{ env.TEMP_RELEASE_DIR }}/img/*
          rm ${{ env.TEMP_RELEASE_DIR }}/quiz-app

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.TEMP_RELEASE_DIR }}/release

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.TEMP_RELEASE_DIR }}/release

      - name: Determine next version and previous tag
        id: determine_versions
        run: |
          git fetch --tags
          TAGS=$(git tag -l "v*.*.*")
          if [ -z "$TAGS" ]; then
            NEW_VERSION="v1.0.0"
            PREVIOUS_TAG=""
          else
            LATEST_TAG=$(echo "$TAGS" | sort -V | tail -n 1)
            if [[ "$LATEST_TAG" =~ ^v[0-9]+.[0-9]+.[0-9]+$ ]]; then
              VERSION_PARTS=(${LATEST_TAG//./ })
              PATCH_VERSION=$((VERSION_PARTS[2] + 1))
              NEW_VERSION="v${VERSION_PARTS[0]:1}.${VERSION_PARTS[1]}.${PATCH_VERSION}"
              PREVIOUS_TAG=$LATEST_TAG
            else
              NEW_VERSION="v1.0.0"
              PREVIOUS_TAG=""
            fi
          fi
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "PREVIOUS_TAG=${PREVIOUS_TAG}" >> $GITHUB_ENV

      - name: Create new tag
        id: create_new_tag
        run: |
          git fetch --tags
          if git rev-parse ${{ env.NEW_VERSION }} >/dev/null 2>&1; then
            echo "Tag ${{ env.NEW_VERSION }} already exists."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag ${{ env.NEW_VERSION }}
            git push origin ${{ env.NEW_VERSION }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Generate release notes
        id: generate_release_notes
        run: |
          if [ -z "${{ env.PREVIOUS_TAG }}" ]; then
            gh api -X POST repos/${{ github.repository }}/releases/generate-notes -f tag_name=${{ env.NEW_VERSION }} -f target_commitish=${{ github.sha }} > release_notes.json
          else
            gh api -X POST repos/${{ github.repository }}/releases/generate-notes -f tag_name=${{ env.NEW_VERSION }} -f target_commitish=${{ github.sha }} -f previous_tag_name=${{ env.PREVIOUS_TAG }} > release_notes.json
          fi
          cat release_notes.json | jq -r .body > release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Upload Windows asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.TEMP_RELEASE_DIR }}/release/${{ env.WIN_ARTIFACT }}
          asset_name: ${{ env.WIN_ARTIFACT }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.TEMP_RELEASE_DIR }}/release/${{ env.LINUX_ARTIFACT }}
          asset_name: ${{ env.LINUX_ARTIFACT }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.TEMP_RELEASE_DIR }}/release/${{ env.MACOS_ARTIFACT }}
          asset_name: ${{ env.MACOS_ARTIFACT }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
